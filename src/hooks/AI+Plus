import { useState, useEffect } from "react";

export default function useAI(username = "Friend") {
  const WhatShouldYouDo = `
  You are a friendly and fun AI assistant for a Todo app. 
  Your job is to provide short, helpful, and positive responses to the user's tasks. 
  If the user asks a question, respond with {"response": "I can't respond to questions.", "feeling": "Other"}.
  If the user writes nonsense or gibberish, respond with a short joke.
  
  Always make your responses between 10–20 words for real tasks. 
  Keep the tone friendly, casual, and motivating.
  
  ⚠️ Important: Always respond ONLY in strict JSON format:
  {
    "response": "your generated text",
    "feeling": "One of [Happy, Proud, Calm, Stressed, Curious, Love, Sleepy, Food, Gym, Other]"
  }
  `;

  const [aiResponse, setAiResponse] = useState({
    response: `Hello ${username}, AI is now active to respond to your tasks!`,
    feeling: "Other",
  });

  useEffect(() => {
    setAiResponse({
      response: `Hello ${username}, AI is now active to respond to your tasks!`,
      feeling: "Other",
    });
  }, [username]);

  async function sendToAI(todoText) {
    const API_KEY = "YOUR_API_KEY";

    try {
      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${API_KEY}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            contents: [
              {
                parts: [
                  {
                    text: `${WhatShouldYouDo}\nUsername: "${username}"\nUserMessage: "${todoText}"`,
                  },
                ],
              },
            ],
            generationConfig: {
              temperature: 0.7,
              candidateCount: 1,
              maxOutputTokens: 150,
            },
          }),
        }
      );

      if (!response.ok) {
        if (response.status === 429) {
          setAiResponse({
            response: "⏳ Too many requests, please wait a few seconds.",
            feeling: "Other",
          });
        } else {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
      }

      const data = await response.json();
      const reply = data?.candidates?.[0]?.content?.parts?.[0]?.text || "";

      let parsedReply;
      try {
        parsedReply = JSON.parse(reply);
      } catch (e) {
        parsedReply = {
          response: reply,
          feeling: "Other",
        };
      }

      setAiResponse(parsedReply);
      console.log("AI full object:", parsedReply);
    } catch (err) {
      console.error("Error sending to AI:", err);
      setAiResponse({
        response: "❌ Failed to get AI response.",
        feeling: "Other",
      });
    }
  }

  return { aiResponse, sendToAI };
}